AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  CustomEventBus: 
    Type: AWS::Events::EventBus
    Properties: 
      Name: "CustomEventBus"

  GetBookingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      Role: !GetAtt GetBookingsExecutionRole.Arn
      CodeUri: booking/functions/ShowBookings/ # folder where your main program resides
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BookingDynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref BookingDynamoDBTable
  
  GetBookingsExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaDynamoDBPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Scan'
                Resource: 
                  - !GetAtt BookingDynamoDBTable.Arn

  BookingDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "BookingDynamoDBTable"
      AttributeDefinitions:
        - AttributeName: "BookingID"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "BookingID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SearchFlightFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: flight-management/functions/ # folder where your main program resides
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FlightManagementDynamoDBTable 
        - DynamoDBWritePolicy:
            TableName: !Ref FlightManagementDynamoDBTable 
  
  BookingCRUD:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: booking/functions/BookingCRUD/ # folder where your main program resides
      Handler: bootstrap
      Runtime: provided.al2
      Architectures: [arm64]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FlightManagementDynamoDBTable 
        - DynamoDBWritePolicy:
            TableName: !Ref FlightManagementDynamoDBTable 

  FlightManagementDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "FlightManagementDynamoDBTable"
      AttributeDefinitions:
        - AttributeName: "FlightId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "FlightId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "APIGateway"
        paths:
            /searchFlight:
              post:
                consumes:
                  - application/json
                produces:
                  - application/json
                parameters: []
                responses: {}
                x-amazon-apigateway-integration:
                  type: aws
                  httpMethod: POST
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFlightFunction.Arn}/invocations"
            /getBookings:
              post:
                consumes:
                  - application/json
                produces:
                  - application/json
                parameters: []
                responses: {}
                x-amazon-apigateway-integration:
                  type: aws
                  httpMethod: POST
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBookingsFunction.Arn}/invocations"

  ConnectedAirlinesUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "ConnectedAirlinesUserPool"
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: "8"
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      AutoVerifiedAttributes:
        - email

  ConnectedAirlinesUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref ConnectedAirlinesUserPool
      Domain: "connectedairlines"
  
  ConnectedAirlinesUserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ConnectedAirlinesUserPool
      ClientName: "ConnectedAirlinesUserClient"
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      CallbackURLs:
        - "https://dev.d3vyzw80s24mm5.amplifyapp.com/Home"
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - phone
        - email
        - openid

  APIGatewayPermissionGetBookings:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetBookingsFunction.Arn
      Principal: apigateway.amazonaws.com

  APIGatewayPermissionSearchFlight:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SearchFlightFunction.Arn
      Principal: apigateway.amazonaws.com

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref CustomEventBus
      EventPattern:
        source:
          - "api.gateway"
        detail-type:
          - "API Gateway Request"
      Targets:
        - Arn: !GetAtt SearchFlightFunction.Arn
          Id: "InvokeSearchFlightFunction"
        - Arn: !GetAtt GetBookingsFunction.Arn
          Id: "InvokeGetBookingsFunction"
